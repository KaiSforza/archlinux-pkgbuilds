#!/bin/bash
#
#   MIT/X Consortium License
#
#   Copyright (c) 2013 William Giokas <1007380@gmail.com>
#
#   Permission is hereby granted, free of charge, to any person obtaining a
#   copy of this software and associated documentation files (the "Software"),
#   to deal in the Software without restriction, including without limitation
#   the rights to use, copy, modify, merge, publish, distribute, sublicense,
#   and/or sell copies of the Software, and to permit persons to whom the
#   Software is furnished to do so, subject to the following conditions:
#
#   The above copyright notice and this permission notice shall be included in
#   all copies or substantial portions of the Software.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
#   THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
#   DEALINGS IN THE SOFTWARE.

# TODO: User configuration file? Man page?
# TODO: (maybe) have dependency ordered building of packages

PACKAGEDIR=${PACKAGEDIR:-$HOME/aur}
LOGFILE=${LOGFILE:-$PACKAGEDIR/makeaur.log}

# Get some variables from makepkg.conf {{{
if [[ -r /etc/makepkg.conf ]]; then
  . /etc/makepkg.conf
fi
if [[ -r "$HOME/.makepkg.conf" ]]; then
  . ~/.makepkg.conf
fi #}}}

# Use colored messages {{{
plain() {
  local mesg=$1; shift
  printf "${BOLD}    ${mesg}${ALL_OFF}\n" "$@" >&2
}

msg() {
  local mesg=$1; shift
  printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

msg2() {
  local mesg=$1; shift
  printf "${BLUE}  ->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

warning() {
  local mesg=$1; shift
  printf "${YELLOW}==> $(gettext "WARNING:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

error() {
  local mesg=$1; shift
  printf "${RED}==> $(gettext "ERROR:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

unset ALL_OFF BOLD BLUE GREEN RED YELLOW
if [[ -t 2 && ! $USE_COLOR = "n" ]]; then
  # prefer terminal safe colored and bold text when tput is supported
  if tput setaf 0 &>/dev/null; then
    ALL_OFF="$(tput sgr0)"
    BOLD="$(tput bold)"
    BLUE="${BOLD}$(tput setaf 4)"
    GREEN="${BOLD}$(tput setaf 2)"
    RED="${BOLD}$(tput setaf 1)"
    YELLOW="${BOLD}$(tput setaf 3)"
  else
    ALL_OFF="\e[1;0m"
    BOLD="\e[1;1m"
    BLUE="${BOLD}\e[1;34m"
    GREEN="${BOLD}\e[1;32m"
    RED="${BOLD}\e[1;31m"
    YELLOW="${BOLD}\e[1;33m"
  fi
fi
readonly ALL_OFF BOLD BLUE GREEN RED YELLOW #}}}

usage() { #{{{
  cat << EOF
${BOLD}Usage: $(basename $0) [makepkg opts] [options] subdir${ALL_OFF}
    For makepkg options, see makepkg(8).
    Dirctories should be organized like so:
      subdir
       |- package1
       |+ - PKGBUILD
       +- package2
        + - PKGBUILD
        ...
    You can specify multiple subdirectories for makeaur to go through, the
    logs will create a separate section for each subdirectory.

    To specify a package to build in the directory use -P<pkgname> (with no
    space.

    options:
      -P<pkgname>    Only build this package. Can be specified multiple times.
      -h --help      Show this usage message.

  Environment Variables:
    ${BLUE}PACKAGEDIR${ALL_OFF}: specifies the path to 'subdir.' Example to build ABS packages:
                    PACKAGEDIR=/var/abs makeaur core
                Default: $PACKAGEDIR
    ${BLUE}LOGFILE${ALL_OFF}:    Normally a log is placed in PACKAGEDIR/LOGFILE, this allows
                the user to specify an alternat location.
                Default: $PACKAGEDIR/makeaur.log

    Based off of abs's 'makeworld.'
EOF
} #}}}

getlogdate() { #{{{
  echo -ne "[$(date "+%F %T")] "
} #}}}

in_array() { #{{{
  local needle=$1; shift
  
  local i opt
  for (( i = $#; i > 0; i-- )); do
    opt=${!i}
    if [[ $opt = "$needle" ]]; then
      # is in array
      echo 0
      return 0
    else
      #not in array
      echo 1
    fi
  done
} #}}}

log_status() { # Write log lines {{{
  case $_status in
    0)
      echo "  $(getlogdate)Package built:         $subdir/$pkgname $_fullpkgver-$_buildarch" >> "$LOGFILE"
      ;;
    1)
      makepkg -eoc
      echo "  $(getlogdate)ERROR: build failure:  $subdir/$pkgname $_fullpkgver-$_buildarch" >> "$LOGFILE"
      ;;
    2)
      (( _cleanup )) && makepkg -eoc
      echo "  $(getlogdate)Package already built: $subdir/$pkgname $_fullpkgver-$_buildarch" >> "$LOGFILE"
      ;;
    *)
      makepkg -eoc
      echo "  $(getlogdate)Unknown error:         $subdir/$pkgname $_fullpkgver-$_buildarch" >> "$LOGFILE"
  esac
} #}}}

makelist() { #{{{
  local prefix suffix list _out
  prefix=$1
  suffix=$2
  shift; shift
  list=($*)
  for i in ${list[@]};do
    full="${prefix}${i}${suffix}"
    _out=(${_out[@]} $full)
  done
  printf -- "%s " ${_out[@]}
} #}}}

unset subdir _makepkg_opts
for i in $*; do
  case $i in
    -h|--help)
      usage
      exit 0
      ;;
    -P*)
      _pkgs=(${_pkgs[@]} ${i#-P})
      ;;
    -*)
      _makepkg_opts=(${_makepkg_opts[@]} $i)
      ;;
    *)
      subdir=$i
      ;;
  esac
done

if [[ ${#subdir} -lt 1 ]]; then
  error "Please specify a directory containing packages."
  usage
  exit 1
fi

if [[ ! -d "$PACKAGEDIR/$subdir" ]]; then
  error "$PACKAGEDIR/$subdir does not exist"
  exit 1
fi
echo "==> Build for $subdir starting at $(date)" >> "$LOGFILE"
# Get a starting date to measure total time taken
startdate="$(date +%s)"
if [[ -n $_pkgs ]]; then
  listpkgs=($(makelist "$PACKAGEDIR/$subdir/" "/PKGBUILD" ${_pkgs[@]}))
else
  listpkgs=("$PACKAGEDIR/$subdir/"*/PKGBUILD)
fi
for pkgbuilds in ${listpkgs[@]}; do
  # Unset all variables and functions that will be set
  unset epoch _status _pkgverfunc epoch pkgs pkgname CC _cleanup arch _buildarch
  unset -f pkgver
  _pkgverfunc=0
  # get the path of the dir, not of the PKGBUILD
  pkgs=${pkgbuilds%%/PKGBUILD}
  pushd $pkgs &>/dev/null
  _status=0
  # source the pkgbuild to get some variables and a function set
  . PKGBUILD
  # Setting the full pkgver {{{
  if declare -f pkgver >/dev/null; then
    _pkgverfunc=1
  fi
  epoch=${epoch:-0}
  if [[ $epoch ]] && (( ! $epoch )); then
    _fullpkgver="$pkgver-$pkgrel"
  else
    _fullpkgver="$epoch:$pkgver-$pkgrel"
  fi #}}}
  # Architecture settings:
  _use_any=$(in_array "any" ${arch[@]})
  case $_use_any in
    0) _buildarch=any ;;
    *) _buildarch=$CARCH ;;
  esac
  # Only run makepkg if there is a pkgverfunc or no file already made {{{
  if [[ ! -f "$PKGDEST/$pkgname-$_fullpkgver-$_buildarch$PKGEXT" || $_pkgverfunc == 1 ]]; then
    makepkg ${_makepkg_opts[@]} || _status=1
    if [[ $_status == 1 && -f "$PKGDEST/$pkgname-$_fullpkgver-$_buildarch$PKGEXT" ]]; then
      _status=2
      _cleanup=1
    fi
  else
    error "Package $pkgname $_fullpkgver already built. (use -f to overwrite)"
    _status=2
  fi #}}}
  log_status
  popd &>/dev/null
done
enddate="$(date +%s)"
# Calculate the time it took to run stuff for this subdir
let totaltime=$enddate-$startdate
echo "==> Build for $subdir took $totaltime seconds" >> "$LOGFILE"
echo "==> Build for $subdir ended at $(date)" >> "$LOGFILE"
