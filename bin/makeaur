#!/bin/bash

AURDIR=$HOME/aur
LOGFILE=$AURDIR/makeaur.log

. ~/.makepkg.conf

if [[ -z $1 ]]; then
  echo "Please specify a subdir"
  exit 1
fi

# Use colored messages {{{
plain() {
  local mesg=$1; shift
  printf "${BOLD}    ${mesg}${ALL_OFF}\n" "$@" >&2
}

msg() {
  local mesg=$1; shift
  printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

msg2() {
  local mesg=$1; shift
  printf "${BLUE}  ->${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

warning() {
  local mesg=$1; shift
  printf "${YELLOW}==> $(gettext "WARNING:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

error() {
  local mesg=$1; shift
  printf "${RED}==> $(gettext "ERROR:")${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n" "$@" >&2
}

unset ALL_OFF BOLD BLUE GREEN RED YELLOW
if [[ -t 2 && ! $USE_COLOR = "n" ]]; then
  # prefer terminal safe colored and bold text when tput is supported
  if tput setaf 0 &>/dev/null; then
    ALL_OFF="$(tput sgr0)"
    BOLD="$(tput bold)"
    BLUE="${BOLD}$(tput setaf 4)"
    GREEN="${BOLD}$(tput setaf 2)"
    RED="${BOLD}$(tput setaf 1)"
    YELLOW="${BOLD}$(tput setaf 3)"
  else
    ALL_OFF="\e[1;0m"
    BOLD="\e[1;1m"
    BLUE="${BOLD}\e[1;34m"
    GREEN="${BOLD}\e[1;32m"
    RED="${BOLD}\e[1;31m"
    YELLOW="${BOLD}\e[1;33m"
  fi
fi
readonly ALL_OFF BOLD BLUE GREEN RED YELLOW #}}}

getlogdate() {
  echo -ne "[$(date "+%F %T")] "
}

in_array() {
  local needle=$1; shift
  
  local i opt
  for (( i = $#; i > 0; i-- )); do
    opt=${!i}
    if [[ $opt = "$needle" ]]; then
      # is in array
      echo 0
      return 0
    else
      #not in array
      echo 1
    fi
  done
}

for i in $*; do
  case $i in
    -*)
      _makepkg_opts=(${_makepkg_opts[@]} $i)
      ;;
    *)
      _dir=(${_dir[@]} $i)
      ;;
  esac
done

for subdir in "${_dir[@]}"; do
  echo "==> Build for $subdir starting at $(date) {{{" >> "$LOGFILE"
  # Get a starting date to measure total time taken
  startdate="$(date +%s)"
  for pkgbuilds in "$AURDIR/$subdir/"*/PKGBUILD; do
    # Unset all variables and functions that will be set
    unset epoch _status _pkgverfunc epoch pkgs pkgname CC _cleanup arch _buildarch
    unset -f pkgver
    _pkgverfunc=0
    # get the path of the dir, not of the PKGBUILD
    pkgs=${pkgbuilds%%/PKGBUILD}
    pushd $pkgs &>/dev/null
    _status=0
    # source the pkgbuild to get some variables and a function set
    . PKGBUILD
    # Setting the full pkgver {{{
    epoch=${epoch:-0}
    if declare -f pkgver >/dev/null; then
      _pkgverfunc=1
    fi
    if [[ $epoch ]] && (( ! $epoch )); then
      _fullpkgver="$pkgver-$pkgrel"
    else
      _fullpkgver="$epoch:$pkgver-$pkgrel"
    fi #}}}
    # Architecture settings:
    _use_any=$(in_array "any" ${arch[@]})
    case $_use_any in
      0) _buildarch=any ;;
      *) _buildarch=$CARCH ;;
    esac
    # Only run makepkg if there is a pkgverfunc or no file already made {{{
    if [[ ! -f "$PKGDEST/$pkgname-$_fullpkgver-$_buildarch$PKGEXT" || $_pkgverfunc == 1 ]]; then
      makepkg ${_makepkg_opts[@]} || _status=1
      if [[ $_status == 1 && -f "$PKGDEST/$pkgname-$_fullpkgver-$_buildarch$PKGEXT" ]]; then
        _status=2
        _cleanup=1
      fi
    else
      error "Package $pkgname $_fullpkgver already built"
      _status=2
    fi #}}}
    # Write log lines {{{
    case $_status in
      0)
        echo "  $(getlogdate)Package built:         $subdir/$pkgname-$_fullpkgver-$_buildarch" >> "$LOGFILE"
        ;;
      1)
        makepkg -eoc
        echo "  $(getlogdate)Package build FAILED:  $subdir/$pkgname-$_fullpkgver-$_buildarch" >> "$LOGFILE"
        ;;
      2)
        (( _cleanup )) && makepkg -eoc
        echo "  $(getlogdate)Package already built: $subdir/$pkgname-$_fullpkgver-$_buildarch" >> "$LOGFILE"
        ;;
      *)
        makepkg -eoc
        echo "  $(getlogdate)Unknown error:         $subdir/$pkgname-$_fullpkgver-$_buildarch" >> "$LOGFILE"
    esac #}}}
    popd &>/dev/null
  done
  enddate="$(date +%s)"
  # Calculate the time it took to run stuff for this subdir
  let totaltime=$enddate-$startdate
  echo "==> Build for $subdir took $totaltime seconds" >> "$LOGFILE"
  echo "==> Build for $subdir ended at $(date) }}}" >> "$LOGFILE"
done
